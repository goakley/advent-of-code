import Data.Ix (range)
import Data.Set (Set, empty, insert, map, member, size)

import Text.Regex.TDFA ((=~))

rawInput :: String
rawInput = unlines [
  "rect 1x1",
  "rotate row y=0 by 5",
  "rect 1x1",
  "rotate row y=0 by 5",
  "rect 1x1",
  "rotate row y=0 by 5",
  "rect 1x1",
  "rotate row y=0 by 5",
  "rect 1x1",
  "rotate row y=0 by 2",
  "rect 1x1",
  "rotate row y=0 by 2",
  "rect 1x1",
  "rotate row y=0 by 3",
  "rect 1x1",
  "rotate row y=0 by 3",
  "rect 2x1",
  "rotate row y=0 by 2",
  "rect 1x1",
  "rotate row y=0 by 3",
  "rect 2x1",
  "rotate row y=0 by 2",
  "rect 1x1",
  "rotate row y=0 by 3",
  "rect 2x1",
  "rotate row y=0 by 5",
  "rect 4x1",
  "rotate row y=0 by 5",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=0 by 10",
  "rotate column x=5 by 2",
  "rotate column x=0 by 1",
  "rect 9x1",
  "rotate row y=2 by 5",
  "rotate row y=0 by 5",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=2 by 5",
  "rotate row y=0 by 5",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate column x=40 by 1",
  "rotate column x=27 by 1",
  "rotate column x=22 by 1",
  "rotate column x=17 by 1",
  "rotate column x=12 by 1",
  "rotate column x=7 by 1",
  "rotate column x=2 by 1",
  "rotate row y=2 by 5",
  "rotate row y=1 by 3",
  "rotate row y=0 by 5",
  "rect 1x3",
  "rotate row y=2 by 10",
  "rotate row y=1 by 7",
  "rotate row y=0 by 2",
  "rotate column x=3 by 2",
  "rotate column x=2 by 1",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=2 by 5",
  "rotate row y=1 by 3",
  "rotate row y=0 by 3",
  "rect 1x3",
  "rotate column x=45 by 1",
  "rotate row y=2 by 7",
  "rotate row y=1 by 10",
  "rotate row y=0 by 2",
  "rotate column x=3 by 1",
  "rotate column x=2 by 2",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=2 by 13",
  "rotate row y=0 by 5",
  "rotate column x=3 by 1",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=3 by 10",
  "rotate row y=2 by 10",
  "rotate row y=0 by 5",
  "rotate column x=3 by 1",
  "rotate column x=2 by 1",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=3 by 8",
  "rotate row y=0 by 5",
  "rotate column x=3 by 1",
  "rotate column x=2 by 1",
  "rotate column x=0 by 1",
  "rect 4x1",
  "rotate row y=3 by 17",
  "rotate row y=2 by 20",
  "rotate row y=0 by 15",
  "rotate column x=13 by 1",
  "rotate column x=12 by 3",
  "rotate column x=10 by 1",
  "rotate column x=8 by 1",
  "rotate column x=7 by 2",
  "rotate column x=6 by 1",
  "rotate column x=5 by 1",
  "rotate column x=3 by 1",
  "rotate column x=2 by 2",
  "rotate column x=0 by 1",
  "rect 14x1",
  "rotate row y=1 by 47",
  "rotate column x=9 by 1",
  "rotate column x=4 by 1",
  "rotate row y=3 by 3",
  "rotate row y=2 by 10",
  "rotate row y=1 by 8",
  "rotate row y=0 by 5",
  "rotate column x=2 by 2",
  "rotate column x=0 by 2",
  "rect 3x2",
  "rotate row y=3 by 12",
  "rotate row y=2 by 10",
  "rotate row y=0 by 10",
  "rotate column x=8 by 1",
  "rotate column x=7 by 3",
  "rotate column x=5 by 1",
  "rotate column x=3 by 1",
  "rotate column x=2 by 1",
  "rotate column x=1 by 1",
  "rotate column x=0 by 1",
  "rect 9x1",
  "rotate row y=0 by 20",
  "rotate column x=46 by 1",
  "rotate row y=4 by 17",
  "rotate row y=3 by 10",
  "rotate row y=2 by 10",
  "rotate row y=1 by 5",
  "rotate column x=8 by 1",
  "rotate column x=7 by 1",
  "rotate column x=6 by 1",
  "rotate column x=5 by 1",
  "rotate column x=3 by 1",
  "rotate column x=2 by 2",
  "rotate column x=1 by 1",
  "rotate column x=0 by 1",
  "rect 9x1",
  "rotate column x=32 by 4",
  "rotate row y=4 by 33",
  "rotate row y=3 by 5",
  "rotate row y=2 by 15",
  "rotate row y=0 by 15",
  "rotate column x=13 by 1",
  "rotate column x=12 by 3",
  "rotate column x=10 by 1",
  "rotate column x=8 by 1",
  "rotate column x=7 by 2",
  "rotate column x=6 by 1",
  "rotate column x=5 by 1",
  "rotate column x=3 by 1",
  "rotate column x=2 by 1",
  "rotate column x=1 by 1",
  "rotate column x=0 by 1",
  "rect 14x1",
  "rotate column x=39 by 3",
  "rotate column x=35 by 4",
  "rotate column x=20 by 4",
  "rotate column x=19 by 3",
  "rotate column x=10 by 4",
  "rotate column x=9 by 3",
  "rotate column x=8 by 3",
  "rotate column x=5 by 4",
  "rotate column x=4 by 3",
  "rotate row y=5 by 5",
  "rotate row y=4 by 5",
  "rotate row y=3 by 33",
  "rotate row y=1 by 30",
  "rotate column x=48 by 1",
  "rotate column x=47 by 5",
  "rotate column x=46 by 5",
  "rotate column x=45 by 1",
  "rotate column x=43 by 1",
  "rotate column x=38 by 3",
  "rotate column x=37 by 3",
  "rotate column x=36 by 5",
  "rotate column x=35 by 1",
  "rotate column x=33 by 1",
  "rotate column x=32 by 5",
  "rotate column x=31 by 5",
  "rotate column x=30 by 1",
  "rotate column x=23 by 4",
  "rotate column x=22 by 3",
  "rotate column x=21 by 3",
  "rotate column x=20 by 1",
  "rotate column x=12 by 2",
  "rotate column x=11 by 2",
  "rotate column x=3 by 5",
  "rotate column x=2 by 5",
  "rotate column x=1 by 3",
  "rotate column x=0 by 4"]

data Command = Rect Int Int | Row Int Int | Col Int Int deriving Show

readLine :: String -> Command
readLine s = case (rectMatch,rowMatch,colMatch) of
              ([[_,x,y]],[],[]) -> Rect (read x) (read y)
              ([],[[_,x,y]],[]) -> Row (read x) (read y)
              ([],[],[[_,x,y]]) -> Col (read x) (read y)
              _ -> undefined
  where rectMatch = s =~ "^rect ([0-9]+)x([0-9]+)$"
        rowMatch = s =~ "^rotate row y=([0-9]+) by ([0-9]+)$"
        colMatch = s =~ "^rotate column x=([0-9]+) by ([0-9]+)$"

input :: [Command]
input = Prelude.map readLine $ lines rawInput

runCommand :: Command -> Set (Int,Int) -> Set (Int,Int)
runCommand (Rect a b) s = foldr Data.Set.insert s $ range ((0,0),(a-1,b-1))
runCommand (Row y n) s = Data.Set.map (\(a,b) -> if b == y then ((a + n) `mod` 50,b) else (a,b)) s
runCommand (Col x n) s = Data.Set.map (\(a,b) -> if a == x then (a,(b + n) `mod` 6) else (a,b)) s

finalState :: Set (Int,Int)
finalState = foldl (flip runCommand) empty input

solution1 :: Int
solution1 = Data.Set.size finalState

solution2 :: String
solution2 = unlines [[if (a,b) `member` finalState then '#' else ' ' | a <- [0..49]] | b <- [0..5]]

main :: IO ()
main = print solution1 >> putStr solution2
